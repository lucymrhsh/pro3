<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mynb.cao.dao.StudentDao">

    <resultMap type="com.mynb.cao.entity.Student" id="StudentMap">
        <result property="stuId" column="stu_id" jdbcType="INTEGER"/>
        <result property="stuNo" column="stu_no" jdbcType="VARCHAR"/>
        <result property="stuName" column="stu_name" jdbcType="VARCHAR"/>
        <result property="stuLogin" column="stu_login" jdbcType="VARCHAR"/>
        <result property="stuPasswd" column="stu_passwd" jdbcType="VARCHAR"/>
        <result property="stuPhone" column="stu_phone" jdbcType="VARCHAR"/>
        <result property="stuLimit" column="stu_limit" jdbcType="INTEGER"/>
        <result property="stuRemain" column="stu_remain" jdbcType="INTEGER"/>
        <result property="stuNote" column="stu_note" jdbcType="VARCHAR"/>
        <result property="collegeId" column="college_id" jdbcType="INTEGER"/>
    </resultMap>

    <!--查询单个-->
    <select id="queryById" resultMap="StudentMap">
        select
          stu_id, stu_no, stu_name, stu_login, stu_passwd, stu_phone, stu_limit, stu_remain, stu_note, college_id
        from card.student
        where stu_id = #{stuId}
    </select>

    <!--查询指定行数据-->
    <select id="queryAllByLimit" resultMap="StudentMap">
        select
          stu_id, stu_no, stu_name, stu_login, stu_passwd, stu_phone, stu_limit, stu_remain, stu_note, college_id
        from card.student
        limit #{offset}, #{limit}
    </select>

    <!--通过实体作为筛选条件查询-->
    <select id="queryAll" resultMap="StudentMap">
        select
        stu_id, stu_no, stu_name, stu_login, stu_passwd, stu_phone, stu_limit, stu_remain, stu_note, college_id
        from card.student
        <where>
            <if test="stuId != null">
                and stu_id = #{stuId}
            </if>
            <if test="stuNo != null and stuNo != ''">
                and stu_no = #{stuNo}
            </if>
            <if test="stuName != null and stuName != ''">
                and stu_name = #{stuName}
            </if>
            <if test="stuLogin != null and stuLogin != ''">
                and stu_login = #{stuLogin}
            </if>
            <if test="stuPasswd != null and stuPasswd != ''">
                and stu_passwd = #{stuPasswd}
            </if>
            <if test="stuPhone != null and stuPhone != ''">
                and stu_phone = #{stuPhone}
            </if>
            <if test="stuLimit != null">
                and stu_limit = #{stuLimit}
            </if>
            <if test="stuRemain != null">
                and stu_remain = #{stuRemain}
            </if>
            <if test="stuNote != null and stuNote != ''">
                and stu_note = #{stuNote}
            </if>
            <if test="collegeId != null">
                and college_id = #{collegeId}
            </if>
        </where>
    </select>

    <!--新增所有列-->
    <insert id="insert" keyProperty="stuId" useGeneratedKeys="true">
        insert into card.student(stu_no, stu_name, stu_login, stu_passwd, stu_phone, stu_limit, stu_remain, stu_note, college_id)
        values (#{stuNo}, #{stuName}, #{stuLogin}, #{stuPasswd}, #{stuPhone}, #{stuLimit}, #{stuRemain}, #{stuNote}, #{collegeId})
    </insert>

    <insert id="insertBatch" keyProperty="stuId" useGeneratedKeys="true">
        insert into card.student(stu_no, stu_name, stu_login, stu_passwd, stu_phone, stu_limit, stu_remain, stu_note,
        college_id)
        values
        <foreach collection="entities" item="entity" separator=",">
            (#{entity.stuNo}, #{entity.stuName}, #{entity.stuLogin}, #{entity.stuPasswd}, #{entity.stuPhone},
            #{entity.stuLimit}, #{entity.stuRemain}, #{entity.stuNote}, #{entity.collegeId})
        </foreach>
    </insert>

    <insert id="insertOrUpdateBatch" keyProperty="stuId" useGeneratedKeys="true">
        insert into card.student(stu_no, stu_name, stu_login, stu_passwd, stu_phone, stu_limit, stu_remain, stu_note,
        college_id)
        values
        <foreach collection="entities" item="entity" separator=",">
            (#{entity.stuNo}, #{entity.stuName}, #{entity.stuLogin}, #{entity.stuPasswd}, #{entity.stuPhone},
            #{entity.stuLimit}, #{entity.stuRemain}, #{entity.stuNote}, #{entity.collegeId})
        </foreach>
        on duplicate key update
        stu_no = values(stu_no) , stu_name = values(stu_name) , stu_login = values(stu_login) , stu_passwd =
        values(stu_passwd) , stu_phone = values(stu_phone) , stu_limit = values(stu_limit) , stu_remain =
        values(stu_remain) , stu_note = values(stu_note) , college_id = values(college_id)
    </insert>

    <!--通过主键修改数据-->
    <update id="update">
        update card.student
        <set>
            <if test="stuNo != null and stuNo != ''">
                stu_no = #{stuNo},
            </if>
            <if test="stuName != null and stuName != ''">
                stu_name = #{stuName},
            </if>
            <if test="stuLogin != null and stuLogin != ''">
                stu_login = #{stuLogin},
            </if>
            <if test="stuPasswd != null and stuPasswd != ''">
                stu_passwd = #{stuPasswd},
            </if>
            <if test="stuPhone != null and stuPhone != ''">
                stu_phone = #{stuPhone},
            </if>
            <if test="stuLimit != null">
                stu_limit = #{stuLimit},
            </if>
            <if test="stuRemain != null">
                stu_remain = #{stuRemain},
            </if>
            <if test="stuNote != null and stuNote != ''">
                stu_note = #{stuNote},
            </if>
            <if test="collegeId != null">
                college_id = #{collegeId},
            </if>
        </set>
        where stu_id = #{stuId}
    </update>

    <!--通过主键删除-->
    <delete id="deleteById">
        delete from card.student where stu_id = #{stuId}
    </delete>

</mapper>